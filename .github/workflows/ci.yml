# Continuous Integration pipeline for deneme1 repository
# Runs on every push and PR. On main branch, it also builds & pushes a Docker image to GHCR.

name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-release:
    runs-on: ubuntu-latest

    # Spin up the same backing services the app expects.
    services:
      mongo:
        image: mongo:7
        ports:
          - 27017:27017
      redis:
        image: redis:7
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎨 Lint (optional)
        run: |
          if npm run | grep -q "lint"; then
            npm run lint
          fi

      - name: 🧪 Run tests with coverage
        run: npm test -- --coverage

      - name: 📤 Upload coverage to Codecov
        if: success() && env.CODECOV_TOKEN != ''
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: 🛠️ Build project
        run: |
          if npm run | grep -q "build"; then
            npm run build
          fi

      - name: 🐳 Extract Docker metadata (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      - name: 🔐 Login to GHCR
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🚢 Build & (optionally) push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

    # Only run the job if package.json exists (skip for docs‐only repos)
    if: |
      contains(toJSON(github.event.head_commit.message), '[skip ci]') == false &&
      hashFiles('package.json') != ''
