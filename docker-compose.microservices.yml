version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - AUTH_SERVICE_URL=http://auth-service:3001
      - USER_SERVICE_URL=http://user-service:3002
      - GROUP_SERVICE_URL=http://group-service:3003
      - MESSAGE_SERVICE_URL=http://message-service:3004
      - MEDIA_SERVICE_URL=http://media-service:3005
      - FILE_SERVICE_URL=http://file-service:3006
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - auth-service
      - user-service
      - group-service
      - message-service
      - media-service
      - file-service
      - redis
    networks:
      - fisqos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Kimlik Doğrulama Servisi
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3001
      - MONGODB_URI=${MONGODB_URI}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
      - mongodb
    networks:
      - fisqos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Kullanıcı Servisi
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3002
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./uploads/avatars:/app/uploads/avatars
    depends_on:
      - redis
      - mongodb
    networks:
      - fisqos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Grup Servisi
  group-service:
    build:
      context: ./services/group-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3003
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./uploads/groups:/app/uploads/groups
    depends_on:
      - redis
      - mongodb
    networks:
      - fisqos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Mesaj Servisi
  message-service:
    build:
      context: ./services/message-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3004
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
      - mongodb
    networks:
      - fisqos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Medya Servisi
  media-service:
    build:
      context: ./services/media-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3005
      - REDIS_URL=redis://redis:6379
      - MEDIASOUP_LISTEN_IP=0.0.0.0
      - MEDIASOUP_ANNOUNCED_IP=${MEDIASOUP_ANNOUNCED_IP}
      - MEDIASOUP_MIN_PORT=10000
      - MEDIASOUP_MAX_PORT=10100
    ports:
      - "10000-10100:10000-10100/udp"
    depends_on:
      - redis
    networks:
      - fisqos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Dosya Servisi
  file-service:
    build:
      context: ./services/file-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3006
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=redis://redis:6379
      - MAX_FILE_SIZE=20971520 # 20MB
      - ALLOWED_MIME_TYPES=image/jpeg,image/png,image/gif,application/pdf,application/zip,text/plain
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      - redis
      - mongodb
    networks:
      - fisqos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis önbellek ve mesaj aracısı
  redis:
    image: redis:alpine
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - fisqos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB veritabanı
  mongodb:
    image: mongo:latest
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DATABASE}
    volumes:
      - mongodb-data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - fisqos-network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # RabbitMQ mesaj kuyruğu
  rabbitmq:
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - fisqos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Prometheus izleme
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - fisqos-network
    restart: unless-stopped

  # Grafana gösterge paneli
  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - fisqos-network
    restart: unless-stopped

volumes:
  redis-data:
  mongodb-data:
  rabbitmq-data:
  prometheus-data:
  grafana-data:

networks:
  fisqos-network:
    driver: bridge
